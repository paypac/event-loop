{"source":"function slowRoutineBody($) {\n    $.pos = $.pos || '@start';\n    $.local = $.local || {};\n    $.temp = $.temp || {};\n    $.error = $.error || { handler: '@fail' };\n    $.finalizers = $.finalizers || { pending: [] };\n    $ambient = slowRoutineBody.ambient || (slowRoutineBody.ambient = function () {\n        var Promise = require('bluebird');\n        var $ambient = Object.create(global);\n        $ambient.require = require.main.require;\n        $ambient.Promise = Promise;\n        return $ambient;\n    }());\n    while (true) {\n        try {\n            switch ($.pos) {\n            case '@start':\n            case '@1':\n                $.local.delay = $.local.arguments[0];\n                $.local.count = $.local.arguments[1];\n                $.local.i = 0;\n            case '@2':\n                $.temp.$2 = $.local.i;\n                $.temp.$3 = $.local.count;\n                $.temp.$1 = $.temp.$2 < $.temp.$3;\n                $.pos = $.temp.$1 ? '@3' : '@4';\n                continue;\n            case '@3':\n                $.temp.$3 = $ambient.console;\n                $.temp.$1 = $.temp.$3['log'];\n                $.temp.$4 = [];\n                $.temp.$6 = 'waiting...';\n                $.temp.$7 = $.local.i;\n                $.temp.$5 = $.temp.$6 + $.temp.$7;\n                $.temp.$4.push($.temp.$5);\n                $.temp.$2 = $.temp.$1.apply($.temp.$3, $.temp.$4);\n                $.outgoing = { type: 'yield' };\n                $.temp.$7 = $ambient.Promise;\n                $.temp.$3 = $.temp.$7['delay'];\n                $.temp.$1 = [];\n                $.temp.$4 = $.local.delay;\n                $.temp.$1.push($.temp.$4);\n                $.outgoing.value = $.temp.$3.apply($.temp.$7, $.temp.$1);\n                delete $.temp.$4;\n                delete $.temp.$1;\n                delete $.temp.$3;\n                delete $.temp.$7;\n                delete $.temp.$2;\n                delete $.temp.$5;\n                delete $.temp.$6;\n                $.pos = '@5';\n                return;\n            case '@5':\n                $.pos = {\n                    yield: '@6',\n                    throw: '@7',\n                    return: '@8'\n                }[$.incoming.type];\n                continue;\n            case '@7':\n                throw $.incoming.value;\n            case '@8':\n                $.result = $.incoming.value;\n                $.pos = '@done';\n                continue;\n            case '@6':\n                $.temp.$6 = $.incoming.value;\n                $.temp.$5 = ++$.local.i;\n                $.pos = '@2';\n                continue;\n            case '@4':\n                $.result = 'done';\n                $.pos = '@done';\n                continue;\n            case '@done':\n                $.outgoing = {\n                    type: 'return',\n                    value: $.result\n                };\n                return;\n            case '@fail':\n                $.outgoing = {\n                    type: 'throw',\n                    value: $.error.value\n                };\n                return;\n            case '@finalize':\n                $.pos = $.finalizers.pending.pop() || $.finalizers.afterward;\n                continue;\n            }\n        } catch (ex) {\n            $.error.occurred = true;\n            $.error.value = ex;\n            $.pos = $.error.handler;\n            continue;\n        }\n    }\n}","originalSource":"function (delay, count) {\r\n            var Promise = __const(require('bluebird'));\r\n            for (var i = 0; i < count; ++i) {\r\n                console.log(\"waiting...\" + i);\r\n                await(Promise.delay(delay));\r\n            }\r\n            return 'done';\r\n        }"}